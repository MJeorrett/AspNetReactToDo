{
	"Anrtd Component": {
		"prefix": "anrtd-c",
		"body": [
			"export interface ${1}Props {",
			"    ${2}",
			"}",
			"",
			"const ${1}: React.FC<${1}Props> = ({",
			"",	
			"}) => {",
			"    return (",
			"        ${0}",
			"    );",
			"};",
			"",
			"export default ${1};"
		],
		"description": "Standard component without props"
	},
	"Anrtd Propless Component": {
		"prefix": "anrtd-pc",
		"body": [
			"const ${1}: React.FC = () => {",
			"    return (",
			"        ${0}",
			"    );",
			"};",
			"",
			"export default ${1};"
		],
		"description": "Standard component without props"
	},
	"Anrtd Page": {
		"prefix": "anrtd-page",
		"body": [
			"import AppPageHeading from '../components/AppPageHeading';",
			"",
			"const ${1}Page: React.FC = () => {",
			"    return (",
			"        <>",
			"            <AppPageHeading>${2}</AppPageHeading>",
			"            ${0}",
			"        </>",
			"    );",
			"};",
			"",
			"export default ${1}Page;"
		],
		"description": "Scaffold a page component."
	},
	"App Models": {
		"prefix": "anrtd-app-models",
		"body": [
			"export interface ${1}Summary {",
			"    id: number,",
			"    ${2},",
			"}",
			"",
			"export interface ${1}Details extends ${1}Summary {",
			"    ${3}",
			"}"
		],
		"description": "Scaffold app models"
	},
	"Antrd Api Models": {
		"prefix": "anrtd-api-models",
		"body": [
			"export interface ApiCreate${1}Dto {",
			"    ${2}",
			"}",
			"",
			"export interface Api${1}Summary extends ApiCreate${1}Dto {",
			"    id: number,",
			"}",
			"",
			"export interface ApiUpdate${1}Dto extends Api${1}Summary {",
			"    ${3}",
			"}",
			"",
			"export interface Api${1}Details extends ApiUpdate${1}Dto {",
			"    createdDate: string,",
			"    lastModifiedDate: string | null,",
			"}${0}"
		],
		"description": "Scaffold api models for an entity."
	},
	"Anrtd paginated store slice": {
		"prefix": "anrtd-paginated-store",
		"body": [
			"import { createEntityAdapter, createSelector, createSlice, EntityState, PayloadAction } from '@reduxjs/toolkit';",
			"import { Pagination } from '../models/Pagination';",
			"import { createHttpClientThunk } from './common/createHttpClientThunk';",
			"",
			"const sliceName = '${1:camelCaseSingular}s';",
			"",
			"const fetchPaginatedAsyncThunk = createHttpClientThunk(",
			"    `\\${sliceName\\}/fetchPaginated`,",
			"    ${2:getAllHttpFunc},",
			");",
			"",
			"const entityAdapter = createEntityAdapter<${3:ModelName}>({",
			"    selectId: _ => _.id,",
			"});",
			"",
			"type SliceState = {",
			"    entityState: EntityState<${3:ModelName}>,",
			"    pagination: Pagination,",
			"    isFetching: boolean,",
			"    isError: boolean,",
			"}",
			"",
			"const initialState: SliceState = {",
			"    entityState: entityAdapter.getInitialState(),",
			"    pagination: {",
			"        pageNumber: 1,",
			"        pageSize: 10,",
			"        hasNextPage: false,",
			"        hasPreviousPage: false,",
			"        totalCount: 0,",
			"        totalPages: 1,",
			"    },",
			"    isFetching: false,",
			"    isError: false,",
			"};",
			"",
			"const slice = createSlice({",
			"    name: sliceName,",
			"    initialState,",
			"    reducers: {",
			"        remove${1/(.*)/${1:/capitalize}/}: (state, { payload }: PayloadAction<number>) => {",
			"            entityAdapter.removeOne(state.entityState, payload);",
			"        },",
			"    },",
			"    extraReducers: builder => {",
			"        builder.addCase(fetchPaginatedAsyncThunk.pending, state => {",
			"            state.isFetching = true;",
			"            state.isError = false;",
			"        });",
			"        builder.addCase(fetchPaginatedAsyncThunk.rejected, state => {",
			"            state.isFetching = false;",
			"            state.isError = true;",
			"        });",
			"        builder.addCase(fetchPaginatedAsyncThunk.fulfilled, (state, { payload }) => {",
			"            state.isFetching = false;",
			"            entityAdapter.removeAll(state.entityState);",
			"            entityAdapter.setAll(state.entityState, payload.items);",
			"            state.pagination = {",
			"                ...payload,",
			"            };",
			"        });",
			"    },",
			"});",
			"",
			"export const {",
			"    name,",
			"    reducer,",
			"} = slice;",
			"",
			"type RootReducerState = {",
			"    [sliceName]: SliceState,",
			"};",
			"",
			"const selectSliceState = (state: RootReducerState) => state[sliceName];",
			"const entitySelectors = entityAdapter.getSelectors();",
			"",
			"const doPaginatedFetch = (",
			"    dispatch: (action: unknown) => void,",
			"    state: SliceState,",
			"    pageNumber?: number,",
			"    pageSize?: number) => {",
			"",
			"    dispatch(fetchPaginatedAsyncThunk({",
			"        pageIndex: pageNumber || state.pagination.pageNumber,",
			"        pageSize: pageSize || state.pagination.pageSize,",
			"    }));",
			"};",
			"",
			"export const actions = {",
			"    fetchAll: () => (dispatch: (action: unknown) => void, getState: () => RootReducerState): void => {",
			"        const state = selectSliceState(getState());",
			"        doPaginatedFetch(dispatch, state);",
			"    },",
			"    delete: (${1}Id: number): PayloadAction<number> => slice.actions.remove${1/(.*)/${1:/capitalize}/}(${1}Id),",
			"    setPageNumber: (pageNumber: number) => (dispatch: (action: unknown) => void, getState: () => RootReducerState): void => {",
			"        const state = selectSliceState(getState());",
			"        doPaginatedFetch(dispatch, state, pageNumber);        ",
			"    },",
			"    setPageSize: (pageSize: number) => (dispatch: (action: unknown) => void, getState: () => RootReducerState): void => {",
			"        const state = selectSliceState(getState());",
			"        doPaginatedFetch(dispatch, state, undefined, pageSize);        ",
			"    },",
			"};",
			"",
			"const createSliceSelector = <T, >(selector: (state: SliceState) => T) => {",
			"    return createSelector(",
			"        selectSliceState,",
			"        selector,",
			"    );",
			"};",
			"",
			"export const selectors = {",
			"    apiState: createSliceSelector(state => ({",
			"        isFetching: state.isFetching,",
			"        isError: state.isError,",
			"    })),",
			"    all: createSliceSelector(state => entitySelectors.selectAll(state.entityState)),",
			"    pagination: createSliceSelector(state => state.pagination),",
			"};"
		],
		"description": "Scaffold a paginated list redux store slice."
	},
	"Anrtd CRUD API client": {
		"prefix": "anrtd-crud-api",
		"body": [
		  "import { ${1}Summary, ${1}Details } from '../models/${1}';",
		  "import { ApiPaginatedResponse, ApiPaginationQueryParams, buildApiUrl, doErrorToastIfRequired, httpClient, mapHttpClientPaginatedResponse, mapHttpClientResponse } from './common';",
		  "import { HttpClientResponse } from './common/httpClient';",
		  "import { ApiCreate${1}Dto, Api${1}Summary, Api${1}Details, ApiUpdate${1}Dto } from './models';",
		  "",
		  "export const getPaginated${1}s = async ({ pageIndex: pageNumber, pageSize }: ApiPaginationQueryParams): Promise<HttpClientResponse<ApiPaginatedResponse<${1}Summary>>> => {",
		  "    const queryParameters = [",
		  "        `pageNumber=\\${pageNumber\\}`,",
		  "        `pageSize=\\${pageSize\\}`,",
		  "    ];",
		  "",
		  "    const url = buildApiUrl(`api/${2:resource-name}?${queryParameters.join('&')}`);",
		  "    const response = await httpClient.getRequest<ApiPaginatedResponse<Api${1}Summary>>(url);",
		  "",
		  "    doErrorToastIfRequired(response);",
		  "    ",
		  "    return mapHttpClientPaginatedResponse(response, x => x);",
		  "};",
		  "",
		  "export const get${1}ById = async (${3:camelCase}Id: number): Promise<HttpClientResponse<${1}Details>> => {",
		  "    const url = buildApiUrl(`api/${2}/${${3}Id}`);",
		  "    const response = await httpClient.getRequest<Api${1}Details>(url);",
		  "",
		  "    doErrorToastIfRequired(response);",
		  "",
		  "    return mapHttpClientResponse(response, x => x);",
		  "};",
		  "",
		  "export const createToDo = async (dto: ApiCreate${1}Dto): Promise<HttpClientResponse<number>> => {",
		  "    const url = buildApiUrl('api/${2}');",
		  "    const response = await httpClient.postRequest<number>(url, dto);",
		  "    ",
		  "    doErrorToastIfRequired(response);",
		  "    ",
		  "    return response;",
		  "};",
		  "",
		  "export const update${1} = async (dto: ApiUpdate${1}Dto): Promise<HttpClientResponse<number>> => {",
		  "    const url = buildApiUrl('api/${2}');",
		  "    const response = await httpClient.putRequest<number>(url, dto);",
		  "    ",
		  "    doErrorToastIfRequired(response);",
		  "    ",
		  "    return response;",
		  "};",
		  "",
		  "export const delete${1} = async (${3}Id: number): Promise<HttpClientResponse<unknown>> => {",
		  "    const url = buildApiUrl(`api/${2}/${${3}Id}`);",
		  "    const response = await httpClient.deleteRequest(url);",
		  "    ",
		  "    doErrorToastIfRequired(response);",
		  "    ",
		  "    return response;",
		  "};"
		],
		"description": "Generate CRUD api client methods."
	  }
}